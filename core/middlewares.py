from django.contrib.auth.models import AnonymousUser
from rest_framework.authtoken.models import Token
from channels.db import database_sync_to_async
from channels.middleware import BaseMiddleware
from channels.db import database_sync_to_async
import threading


class RequestMiddleware:
    """
    Middleware class to handle requests and responses.

    Args:
        get_response (function): The next middleware or view function in the chain.
        thread_local (object, optional): Thread-local storage for storing the current request. Defaults to threading.local().

    Attributes:
        get_response (function): The next middleware or view function in the chain.
        thread_local (object): Thread-local storage for storing the current request.

    """

    def __init__(self, get_response, thread_local=threading.local()):
        self.get_response = get_response
        self.thread_local = thread_local
        # One-time configuration and initialization.

    def __call__(self, request):
        """
        Process the request and return the response.

        Args:
            request (HttpRequest): The incoming request.

        Returns:
            HttpResponse: The response generated by the view or middleware.

        """
        # Code to be executed for each request before
        # the view (and later middleware) are called.
        self.thread_local.current_request = request 
        response = self.get_response(request)

        # Code to be executed for each request/response after
        # the view is called.

        return response
    
@database_sync_to_async
def get_user(token_key):
    """
    Retrieve the user associated with the given token key.

    Args:
        token_key (str): The token key used to identify the user.

    Returns:
        User: The user associated with the token key, or an instance of AnonymousUser if the token does not exist.
    """
    try:
        token = Token.objects.get(key=token_key)
        return token.user
    except Token.DoesNotExist:
        return AnonymousUser()


class TokenAuthMiddleware(BaseMiddleware):
    def __init__(self, inner):
        """
        Initializes the Middleware class.

        Args:
            inner: The inner middleware or application.

        Returns:
            None
        """
        super().__init__(inner)

    async def __call__(self, scope, receive, send):
        try:
            token_key = scope['query_string'].decode()
        except ValueError:
            token_key = None
        
        scope['user'] = await get_user(token_key)
        return await super().__call__(scope, receive, send)